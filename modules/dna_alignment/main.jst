# DNA Alignment with BWA MEM
# Take DNA fastq data files to aligned bams with qc data
{% from 'modules/dna_alignment/bwa_mem_samtools.jst' import bwa_mem_samtools_chunked with context %}
{% from 'modules/dna_alignment/bwa_mem2_samtools.jst' import bwa_mem2_samtools_chunked with context %}
{% from 'modules/dna_alignment/pb_fq2bam.jst' import fq2bam with context %}
{% from 'modules/dna_alignment/bwa_mem_gatk_picard.jst' import bwa_mem_gatk_picard_chunked with context %}
{% from 'modules/dna_alignment/bwa_mem_samblaster_sambamba.jst' import bwa_mem_blaster_bamba with context %}
{% from 'modules/dna_alignment/bowtie2_samtools.jst' import bowtie2_samtools_chunked with context %}

{% macro dna_alignment(samples) %}

  {# Not configurable by LIMS #}
  {% set reads_per_chunk = reads_per_chunk|default(40000000) %}

  {% for sample in samples.values() if sample.gltype == 'chip' %}
    {% set platform = (sample.read_groups.values()|first).rgpm|default('') %}
    {% if platform|lower in ['hiseq4000', 'novaseq6000'] %}
      {% set opt_dup_distance = 2500 %}
    {% else %}
      {% set opt_dup_distance = 100 %}
    {% endif %}

    {{- bowtie2_samtools_chunked(sample, reads_per_chunk, opt_dup_distance) }}

    {{- bam_to_cram(sample, aligner='bowtie2') }}

    {{- bam_qc(sample, aligner='bowtie2') }}

  {% endfor %}

  {% for sample in samples.values() if sample.gltype in ['genome', 'exome'] %}

    {% set alignment_style = [] %}
    {% if dnaAlignmentStyle == 'all' %}
      {% do alignment_style.append('pcrfree') %}
      {% do alignment_style.append('pcrfree_nomultidup') %}
      {% do alignment_style.append('tgen') %}
      {% do alignment_style.append('tgen_nomultidup') %}
      {% do alignment_style.append('broad') %}
      {% do alignment_style.append('ashion') %}
      {% do alignment_style.append('parabricks') %}
    {% else %}
      {% do alignment_style.append(dnaAlignmentStyle|default('tgen')|lower) %}
    {% endif %}

    {% set platform = (sample.read_groups.values()|first).rgpm|default('') %}
    {% if platform|lower in ['hiseq4000', 'novaseq6000'] %}
      {% set opt_dup_distance = 2500 %}
    {% else %}
      {% set opt_dup_distance = 100 %}
    {% endif %}

    {# PCRfree will not have any pcr cycles #}
    {% if 'pcrfree' in alignment_style %}
      {{- bwa_mem2_samtools_chunked(sample, reads_per_chunk, opt_dup_distance, aligner='pcrfree') }}
      {{- bwa_mem2_samtools_chunked(sample, reads_per_chunk, opt_dup_distance, aligner='pcrfree_nomultidup', nomultidup=true) }}
    {% endif %}

    {% if sample.gltype == 'genome' %}
      {% if tasks.Genome_alignment_base_recalibration_gatk|default(false) %}
        {{- baserecalibration(sample, aligner='bwa') }}
      {% else %}
        {{- nobaserecalibration(sample, aligner='bwa') }}
      {% endif %}
    {% elif sample.gltype == 'exome' %}
      {% if tasks.Exome_alignment_base_recalibration_gatk|default(false) %}
        {{- baserecalibration(sample, aligner='bwa') }}
      {% else %}
        {{- nobaserecalibration(sample, aligner='bwa') }}
      {% endif %}
    {% endif %}

    {{- bam_to_cram(sample, aligner='bwa') }}
    {{- md5sum_bam_cram(sample, aligner='bwa') }}
    {{- bam_qc(sample, aligner='bwa') }}

  {% endfor %}

{% endmacro %}
